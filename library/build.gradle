apply plugin: 'com.android.library'
apply plugin: 'es.rafaco.inappdevtools'
apply from: '../compat/compat.gradle'
apply from: 'publish.gradle'

android {
    compileSdkVersion rootProject.ext.libraryCompileSdkVersion
    buildToolsVersion rootProject.ext.libraryBuildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.libraryMinSdkVersion
        targetSdkVersion rootProject.ext.libraryTargetSdkVersion
        versionCode rootProject.ext.libraryVersionCode
        versionName rootProject.ext.libraryWorkingVersion

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_7
        sourceCompatibility JavaVersion.VERSION_1_7
    }

    flavorDimensions "compatibility"
    productFlavors {
        androidx {
            dimension "compatibility"
            buildConfigField "String", "MY_FLAVOR", "\"androidx\""
            processor.symbols "ANDROIDX"
            matchingFallbacks = ['debug', 'release']
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }
        support {
            dimension "compatibility"
            buildConfigField "String", "MY_FLAVOR", "\"support\""
            processor.symbols "SUPPORT"
            matchingFallbacks = ['debug', 'release']
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
    }

    //Allow direct import from app module, without local or bintray repos:
    // implementation project(path: ':inappdevtools')
    //defaultPublishConfig 'supportDebug'
}


// Dynamic dependencies for Compat module (AndroidX/Support)
android.libraryVariants.all { variant ->
    /*if (variant.buildType.name == "debug") {
        dependencies{
            debugApi project(path: ':compat')
        }
    }
    else */
    if (variant.flavorName == 'androidx'){
        dependencies.androidxApi "es.rafaco.compat:androidx:$rootProject.ext.libraryPublishedVersion"
    }
    else{
        dependencies.supportApi "es.rafaco.compat:support:$rootProject.ext.libraryPublishedVersion"
    }
}

dependencies {

    // AndroidX/Support view components are added by compat module

    // AndroidX logic components
    androidxApi "androidx.annotation:annotation:$rootProject.ext.libraryAndroidxVersion"
    androidxApi "androidx.room:room-runtime:$rootProject.ext.libraryAndroidx2Version"
    androidxAnnotationProcessor "androidx.room:room-compiler:$rootProject.ext.libraryAndroidx2Version"
    androidxApi "androidx.lifecycle:lifecycle-runtime:$rootProject.ext.libraryAndroidx2Version"
    androidxApi "androidx.lifecycle:lifecycle-extensions:$rootProject.ext.libraryAndroidx2Version"
    androidxAnnotationProcessor "androidx.lifecycle:lifecycle-compiler:$rootProject.ext.libraryAndroidx2Version"
    androidxApi "androidx.paging:paging-runtime:$rootProject.ext.libraryAndroidx2Version"

    // Support logic components
    supportApi "com.android.support:support-annotations:$rootProject.ext.librarySupportVersion"
    supportApi "android.arch.persistence.room:runtime:$rootProject.ext.librarySupportArchVersion"
    supportAnnotationProcessor "android.arch.persistence.room:compiler:$rootProject.ext.librarySupportArchVersion"
    supportApi "android.arch.lifecycle:extensions:$rootProject.ext.librarySupportArchVersion"
    supportApi "android.arch.lifecycle:runtime:$rootProject.ext.librarySupportArchVersion"
    supportAnnotationProcessor "android.arch.lifecycle:compiler:$rootProject.ext.librarySupportArchVersion"
    supportApi "android.arch.paging:runtime:$rootProject.ext.librarySupportPagingVersion"

    // Pandora
    androidxApi "com.github.whataa:pandora:androidx_v2.0.2"
    supportApi "com.github.whataa:pandora:v2.0.2"

    // Retrofit
    api 'com.squareup.retrofit2:retrofit:2.6.2'
    api 'com.squareup.retrofit2:converter-gson:2.6.2'
    api 'com.squareup.okhttp3:logging-interceptor:3.9.0'

    // Others
    api 'com.readystatesoftware.chuck:library:1.1.0'
    api 'com.github.alorma:timelineview:2.3.0'
    api 'com.github.anrwatchdog:anrwatchdog:1.3.0'
    api 'com.valdesekamdem.library:md-toast:0.9.0'
    api "com.github.nisrulz:easydeviceinfo-base:2.4.1"
    //api 'com.opencsv:opencsv:4.2' // Using org.apache.commons

    //Test
    testImplementation 'junit:junit:4.12'

    // AndroidX/Support test components (TODO)
    androidTestAndroidxImplementation 'androidx.test:runner:1.1.0'
    androidTestAndroidxImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestSupportImplementation 'com.android.support.test:runner:1.0.2'
    androidTestSupportImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    testSupportImplementation "android.arch.persistence.room:testing:$rootProject.ext.librarySupportArchVersion"
    testSupportImplementation "android.arch.core:core-testing:$rootProject.ext.librarySupportArchVersion"
    testSupportImplementation "android.arch.paging:common:$rootProject.ext.librarySupportPagingVersion"
}
