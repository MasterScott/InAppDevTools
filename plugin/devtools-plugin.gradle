import java.time.*

class DevtoolsConfigExtension {
    boolean enabled
    String email
}

class DevToolsPlugin implements Plugin<Project> {
    void apply(Project project) {
        def extension = project.extensions.create('devtools', DevtoolsConfigExtension)
        def startTime

        project.task('onStart',
                description: 'First task for initializations',
                group: 'devtools') {

            doFirst {
                startTime = Instant.now()
            }
        }

        project.task('packSources',
                description: 'Generate a Jar file with all java sources, including generated ones',
                group: 'devtools',
                dependsOn: project.tasks.onStart,
                type: Jar){
            from project.android.sourceSets.main.java.srcDirs
            from("${project.buildDir}/generated/")
            into "${project.buildDir}/devtools"
            archiveName = "${project.name}_sources.jar"
            excludes = ["${project.buildDir}/generated/res/pngs/**"]
        }

        project.task('packResources',
                description: 'Generate a Zip file with the resources',
                group: 'devtools',
                dependsOn: project.tasks.onStart,
                type: Zip){
            from project.android.sourceSets.main.res.srcDirs
            into "${project.buildDir}/devtools"
            archiveName = "${project.name}_resources.zip"
            excludes = ["**/res/raw/**"] //TODO: exclude more specifically
        }

        project.task('copyToRawResources',
                description: 'Copy the generated files into raw resources folder',
                group: 'devtools',
                dependsOn: [ project.tasks.packSources, project.tasks.packResources],
                type: Copy) {
            from project.files(["${project.buildDir}/devtools/${project.name}_sources.jar",
                                "${project.buildDir}/devtools/${project.name}_resources.zip"])
            into 'src/main/res/raw'
        }

        project.task('run',
                description: 'Last plugin task',
                group: 'devtools',
                dependsOn: project.tasks.copyToRawResources ) {

            doLast {
                def duration = Duration.between(startTime, Instant.now()).toSeconds()
                println "   InAppDevTools plugin for ${project.name} took " + duration + " seconds"
                println "   Config: enabled=${extension.enabled}, email=${extension.email}"
            }
        }

        project.tasks.whenTaskAdded { theTask ->
            if (theTask.name.contains("package") & theTask.name.contains("Resources")) {
                println theTask.name
                theTask.dependsOn project.tasks.run
            }
        }
    }
}

apply plugin: DevToolsPlugin