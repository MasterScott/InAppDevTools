apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "es.rafaco.inappdevtools.sample"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 45
        versionName "0.0.01"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_8
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    def support_version = "28.0.0"
    implementation "com.android.support:appcompat-v7:$support_version"
    implementation "com.android.support:design:$support_version"
    implementation "com.android.support:support-v4:$support_version"
    implementation "com.android.support:recyclerview-v7:$support_version"
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    // Import our library from repository (jCenter or localMaven). Standard usage.
    //implementation 'es.rafaco.inappdevtools:inappdevtools:0.0.40'

    // Import our library from local subproject, for development.
    implementation project(path: ':inappdevtools')
}

// Import our plugin from repository (jCenter or localMaven). Standard usage.
apply plugin: 'es.rafaco.inappdevtools'

// Import our plugin from local module, for development.
//apply from: '../plugin/inappdevtools.gradle'

inappdevtools {
    enabled = true
    debug = true
    email = 'inappdevtools@gmail.com'
}

afterEvaluate(){
    try {
        def gitInfo = 'git describe --tags --always --dirty'.execute([], project.rootDir).text.trim()
        println "GIT_INFO" + " = " + "\"${gitInfo}\""

        def gitBranch = ('git branch'.execute([], project.rootDir).text.trim() =~ /(?m)\* (.*)$/)[0][1]
        println "GIT_BRANCH" + " = " + "\"${gitBranch}\""
        def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
        println "GIT_SHA" + " = " + "\"${gitSha}\""
        def gitTag = 'git describe --tags --abbrev=0'.execute([], project.rootDir).text.trim()
        println "GIT_TAG" + " = " + "\"${gitTag}\""

        def gitCommit = 'git log -1'.execute([], project.rootDir).text.trim()
        println "GIT_COMMIT" + " = " + "\"${gitCommit}\""
        def gitCommitShort = 'git log --oneline -1'.execute([], project.rootDir).text.trim()
        println "GIT_COMMIT_SHORT" + " = " + "\"${gitCommitShort}\""
        def gitCommitMessage = 'git log -1 --pretty=%B'.execute([], project.rootDir).text.trim()
        println "GIT_COMMIT_MESSAGE" + " = " + "\"${gitCommitMessage}\""

        def gitStatus = 'git status --short'.execute([], project.rootDir).text.trim()
        def gitDiff = 'git diff HEAD'.execute([], project.rootDir).text.trim()
        def gitDirty = gitDiff != ''
        println "GIT_DIRTY" + " = " + "\"${gitDirty}\""
        println "GIT_STATUS" + " = " + "\"${gitStatus}\""
        println "GIT_DIFF" + " = " + "\"${gitDiff}\""

    } catch (java.io.IOException e) {
        logger.warn ("Unable to call git command, is git in your PATH?")
        //if (debug) { e.printStackTrace() }
    }catch (Exception e) {
        logger.warn ("Unable to get git info")
        //if (debug) { e.printStackTrace() }
    }
}
